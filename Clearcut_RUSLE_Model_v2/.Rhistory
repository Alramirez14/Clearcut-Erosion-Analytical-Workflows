test_site_path <- ("sample_data/sample_site/Smith_study_polygons.shp")
test_site <- vect(test_site_path) %>%
project("EPSG:32610")
test_site_path <- ("sample_data/sample_site/Smith_study_polygons.shp")
first_NDVI_image_path <- ("sample_data/NDVI/Smith_Landsat8_NDVI_2013.tif")
reference <- rast(first_NDVI_image_path)
dem <- rast("sample_data/DEM/DEM_UTM10N_clipped.tiff") %>%
project("EPSG:32610", method = "near")
# Define folders
ndvi_folder <- "sample_data/NDVI"
output_c_folder <- "processed_C_factors"
# Load all NDVI files
ndvi_files <- list.files(ndvi_folder, pattern = "\\.tif$", full.names = TRUE)
# Define the C factor calculation function (Knijff et al.)
calculate_c_knijff <- function(ndvi) {
alpha <- 2
beta <- 0.5
c <- exp(-alpha * (ndvi / beta - ndvi))
c <- ifelse(c > 1, 1, c)
return(c)
}
# Loop through NDVI files
for (file in ndvi_files) {
year <- str_extract(basename(file), "\\d{4}")
if (is.na(year)) next
ndvi <- rast(file)
ndvi_projected <- project(ndvi, "EPSG:32610", method = "near")
# Calculate C factor
c_factor <- app(ndvi_projected, calculate_c_knijff)
# Clip and mask to study site
c_clipped <- mask(crop(c_factor, test_site), test_site)
# Resample to match reference raster
c_resampled <- resample(c_clipped, reference, method = "near")
# Save output
writeRaster(c_resampled, file.path(output_c_folder, paste0("C_factor_", year, ".tif")), overwrite = TRUE)
}
precip_folder <- "sample_data/precip_raw"  # e.g., "data/precip/"
precip_files <- list.files(precip_folder, pattern = "\\.bil$", full.names = TRUE)
output_precip_folder <- "processed_precip"
# Create an empty list to store processed rasters
precip_list <- list()
for (file in precip_files) {
# Extract year from filename using regex
year <- stringr::str_extract(basename(file), "\\d{4}")
if (is.na(year)) next  # skip files without a valid year
# Load, project, and resample precipitation
precip_raw <- rast(file)
precip_projected <- project(precip_raw, "EPSG:32610", method = "near")
precip_clipped <- mask(crop(precip_projected, test_site), test_site)
precip_resampled <- resample(precip_clipped, reference, method = "near")
# Save processed raster
output_path <- file.path(output_precip_folder, paste0("precip_", year, "_processed.tif"))
writeRaster(precip_resampled, output_path, overwrite = TRUE)
# Optionally store in list for further calculations
precip_list[[year]] <- precip_resampled
}
K <- rast("sample_data/soil_data/k_utm_v2.tif") %>%
'/'(100) #correcting unit scale for RUSLE
K_projected <- project(K, "EPSG:32610", method = "near")
K_clipped <- mask(crop(K_projected, test_site), test_site)
dem_clipped <- mask(crop(dem, test_site), test_site)
slope_clipped <- dem_clipped %>%
project("EPSG:32610", method = "near") %>%
terrain(v = "slope", unit = "degrees")
slope_resampled <- resample(slope_clipped, reference, method = "near")
K_resampled <- resample(K_clipped, reference, method = "near")
output_K_folder <- "processed_K_factor"
writeRaster(K_resampled, file.path(output_K_folder, "K.tif"), overwrite = TRUE)
dem_resampled <- resample(dem_clipped, reference, method = "near")
calculate_r_moore <- function(p) {
ke <- 11.46 * p - 2226
r <- 0.029 * ke - 26
r_si <- 17.02 * r
return(r_si)
}
calculate_R_wischmeier <- function(p_mm) {
p_in <- p_mm / 25.4
R_in <- 0.7397 * p_in^1.847
return(R_in)
}
output_rmoore_folder <- "processed_Rmoore_factors"
output_rwisch_folder <- "processed_Rwisch_factors"
processed_files <- list.files(output_precip_folder, pattern = "\\.tif$", full.names = TRUE)
for (file in processed_files) {
year <- stringr::str_extract(basename(file), "\\d{4}")
if (is.na(year)) next
precip <- terra::rast(file)
r_moore <- terra::app(precip, calculate_r_moore)
r_wisch <- terra::app(precip, calculate_R_wischmeier)
writeRaster(r_moore, file.path(output_rmoore_folder, paste0("R_moore_", year, ".tif")), overwrite = TRUE)
writeRaster(r_wisch, file.path(output_rwisch_folder, paste0("R_wisch_", year, ".tif")), overwrite = TRUE)
}
flow_dir <- terrain(dem_resampled,
v = "flowdir",
unit = "radians")
flow_acc <- flowAccumulation(flow_dir)
cell_size <- res(dem_resampled)[1]  # get cell size in meters (assuming square cells)
slope_rad <- slope_resampled * (pi / 180)  # if slope in degrees; skip if already radians
m <- 0.5
n <- 1.3
LS <- ((flow_acc * cell_size) / 22.13)^m * (sin(slope_rad) / 0.0896)^n
output_ls_folder <- "processed_LS_factor"
writeRaster(LS, file.path(output_ls_folder, "LS.tif"), overwrite = TRUE) #tweak for desired output dir
# Set folders
r_folder <- "processed_Rwisch_factors"      # Folder with R rasters (one per year)
c_folder <- "processed_C_factors"      # Folder with C rasters (one per year)
output_rusle_folder <- "rusle_outputs" # Folder for RUSLE rasters (optional)
# Load static rasters
K <- rast("processed_K_factor/K.tif")
LS <- rast("processed_LS_factor/LS.tif")
# List R and C files
r_files <- list.files(r_folder, pattern = "\\.tif$", full.names = TRUE)
c_files <- list.files(c_folder, pattern = "\\.tif$", full.names = TRUE)
# Extract year keys
r_years <- str_extract(basename(r_files), "\\d{4}")
c_years <- str_extract(basename(c_files), "\\d{4}")
# Intersect years available in both R and C
common_years <- intersect(r_years, c_years)
#NDVI for correlation
ndvi_folder <- "sample_data/NDVI"
prev_ndvi <- NA  # initialize outside the loop
# Initialize results data frame
rusle_results <- data.frame(
Year = character(),
Mean_A = numeric(),
SD_A = numeric(),
Mean_R = numeric(),
Mean_K = numeric(),
Mean_LS = numeric(),
Mean_C = numeric(),
stringsAsFactors = FALSE
)
rusle_results <- data.frame(
Year = character(),
Mean_A = numeric(),
SD_A = numeric(),
Mean_R = numeric(),
Mean_K = numeric(),
Mean_LS = numeric(),
Mean_C = numeric(),
Mean_NDVI = numeric(),
Delta_NDVI = numeric(),
stringsAsFactors = FALSE
)
for (year in sort(common_years)) {
message("Processing year: ", year)
r_path <- r_files[which(r_years == year)]
c_path <- c_files[which(c_years == year)]
R <- rast(r_path)
C <- rast(c_path)
# Locate matching NDVI file
ndvi_path <- list.files(ndvi_folder, pattern = paste0(year, ".*\\.tif$"), full.names = TRUE)
if (length(ndvi_path) == 1) {
ndvi_raster <- rast(ndvi_path)
ndvi_projected <- project(ndvi_raster, "EPSG:32610", method = "near")
ndvi_resampled <- resample(mask(crop(ndvi_projected, test_site), test_site), reference)
mean_ndvi <- mean(values(ndvi_resampled, na.rm = TRUE))
} else {
warning("NDVI file for year ", year, " not found or ambiguous.")
mean_ndvi <- NA
}
# Compute NDVI change
if (!is.na(prev_ndvi) && !is.na(mean_ndvi)) {
delta_ndvi <- mean_ndvi - prev_ndvi
} else {
delta_ndvi <- NA
}
prev_ndvi <- mean_ndvi  # update for next year
# Compute RUSLE A
A <- R * K * LS * C
output_path <- file.path(output_rusle_folder, paste0("RUSLE_A_", year, ".tif"))
writeRaster(A, output_path, overwrite = TRUE)
# Stats
mean_A <- mean(values(A, na.rm = TRUE))
sd_A <- sd(values(A, na.rm = TRUE))
mean_R <- mean(values(R, na.rm = TRUE))
mean_K <- mean(values(K, na.rm = TRUE))
mean_LS <- mean(values(LS, na.rm = TRUE))
mean_C <- mean(values(C, na.rm = TRUE))
rusle_results <- bind_rows(rusle_results, data.frame(
Year = year,
Mean_A = mean_A,
SD_A = sd_A,
Mean_R = mean_R,
Mean_K = mean_K,
Mean_LS = mean_LS,
Mean_C = mean_C,
Mean_NDVI = mean_ndvi,
Delta_NDVI = delta_ndvi
))
}
plot(rast("processed_C_factors/C_factor_2023.tif"))
rusle_results <- read.csv("rusle_summary_by_year.csv")
# Save results to CSV
write.csv(rusle_results, "rusle_summary_by_year.csv", row.names = FALSE)
rusle_results <- read.csv("rusle_summary_by_year.csv")
# Define pretty variable names for facet labels
pretty_names <- c(
Mean_C = "Cover Factor (C) ",
Delta_NDVI = "ΔNDVI (year-over-year)",
Mean_R = "Rainfall Factor (R)"
)
# Prepare long-form data
long_data <- rusle_results %>%
select(Year, Mean_A, Mean_C, Delta_NDVI, Mean_R) %>%
pivot_longer(cols = -c(Year, Mean_A), names_to = "Variable", values_to = "Value") %>%
mutate(Variable = recode(Variable, !!!pretty_names))
rusle_results <- read.csv("rusle_summary_by_year.csv")
# Define pretty variable names for facet labels
pretty_names <- c(
Mean_C = "Cover Factor (C) ",
Delta_NDVI = "ΔNDVI (year-over-year)",
Mean_R = "Rainfall Factor (R)"
)
# Prepare long-form data
long_data <- rusle_results %>%
select(Year, Mean_A, Mean_C, Delta_NDVI, Mean_R) %>%
pivot_longer(cols = -c(Year, Mean_A), names_to = "Variable", values_to = "Value") %>%
mutate(Variable = recode(Variable, !!!pretty_names))
library(dplyr)
library(tidyverse)
# Prepare long-form data
long_data <- rusle_results %>%
select(Year, Mean_A, Mean_C, Delta_NDVI, Mean_R) %>%
pivot_longer(cols = -c(Year, Mean_A), names_to = "Variable", values_to = "Value") %>%
mutate(Variable = recode(Variable, !!!pretty_names))
library(dplyr)
library(tidyverse)
# Prepare long-form data
long_data <- rusle_results %>%
select(Year, Mean_A, Mean_C, Delta_NDVI, Mean_R) %>%
pivot_longer(cols = -c(Year, Mean_A), names_to = "Variable", values_to = "Value") %>%
mutate(Variable = recode(Variable, !!!pretty_names))
# Prepare long-form data
long_data <- rusle_results %>%
dplyr::select(Year, Mean_A, Mean_C, Delta_NDVI, Mean_R) %>%
pivot_longer(cols = -c(Year, Mean_A), names_to = "Variable", values_to = "Value") %>%
mutate(Variable = recode(Variable, !!!pretty_names))
# Plot
ggplot(long_data, aes(x = Value, y = Mean_A)) +
geom_point(size = 3, aes(color = Variable), alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, aes(color = Variable), linewidth = 1.2) +
facet_wrap(~ Variable, scales = "free", nrow = 1) +
stat_poly_eq(
aes(label = paste(..rr.label..)),
formula = y ~ x,
parse = TRUE,
label.x.npc = "right", label.y.npc = "top",
size = 5,
color = "black",
inherit.aes = TRUE
) +
theme_classic(base_size = 14) +
theme(
strip.background = element_rect(fill = "#E0E0E0", color = NA),
strip.text = element_text(size = 14, face = "bold", color = "black"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text.x = element_text(),
axis.ticks.x = element_line()
) +
scale_color_brewer(palette = "Set2") +
labs(
title = "Drivers of Soil Loss (RUSLE A) in Yachats Catchment",
x = NULL,
y = expression(paste("Mean Soil Loss (A) [Tons·acre"^{-1}~"·yr"^{-1}*"]"))
)
ggplot(long_data, aes(x = Year, y = Value, group = 1)) +
geom_line(color = "#2c7fb8", size = 1) +
geom_point(color = "#2c7fb8", size = 2) +
scale_x_continuous(breaks = 2013:2023) +
facet_wrap(~ Variable, scales = "free_y", ncol = 1,
labeller = labeller(Variable = c(
Mean_A = "Mean Soil Loss (A)",
Mean_R = "Mean Rainfall Factor (R)",
Mean_C = "Mean Cover Factor (C)",
Delta_NDVI = "Change in NDVI (ΔNDVI)"
))) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(face = "bold", size = 14),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 12),
panel.grid.minor = element_blank()
) +
labs(
y = NULL,
title = "Time Series of RUSLE Components in Yachats Catchment"
)
# Prepare long-form data
long_data <- rusle_results %>%
dplyr::select(Year, Mean_A, Mean_C, Delta_NDVI, Mean_R) %>%
pivot_longer(cols = -c(Year), names_to = "Variable", values_to = "Value") %>%
mutate(Variable = recode(Variable, !!!pretty_names))
ggplot(long_data, aes(x = Year, y = Value, group = 1)) +
geom_line(color = "#2c7fb8", size = 1) +
geom_point(color = "#2c7fb8", size = 2) +
scale_x_continuous(breaks = 2013:2023) +
facet_wrap(~ Variable, scales = "free_y", ncol = 1,
labeller = labeller(Variable = c(
Mean_A = "Mean Soil Loss (A)",
Mean_R = "Mean Rainfall Factor (R)",
Mean_C = "Mean Cover Factor (C)",
Delta_NDVI = "Change in NDVI (ΔNDVI)"
))) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(face = "bold", size = 14),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 12),
panel.grid.minor = element_blank()
) +
labs(
y = NULL,
title = "Time Series of RUSLE Components in Yachats Catchment"
)
ggplot(long_data, aes(x = Year, y = Value, group = 1)) +
geom_line(color = "#2c7fb8", size = 1) +
geom_point(color = "#2c7fb8", size = 2) +
scale_x_continuous(breaks = 2013:2023) +
facet_wrap(~ Variable, scales = "free_y", ncol = 1,
labeller = labeller(Variable = c(
Mean_A = "Mean Soil Loss (A)",
Mean_R = "Mean Rainfall Factor (R)",
Mean_C = "Mean Cover Factor (C)",
Delta_NDVI = "Change in NDVI (ΔNDVI)"
))) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(face = "bold", size = 14),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 12),
panel.grid.minor = element_blank()
) +
labs(
y = NULL,
title = "Time Series of RUSLE Components in Smith Catchment"
)
ggplot(long_data, aes(x = Year, y = Value, group = 1)) +
geom_line(color = "#2c7fb8", size = 1) +
geom_point(color = "#2c7fb8", size = 2) +
scale_x_continuous(breaks = 2013:2023) +
facet_wrap(~ Variable, scales = "free_y", ncol = 1,
labeller = labeller(Variable = c(
Mean_A = "Mean Soil Loss (A)",
Mean_R = "Mean Rainfall Factor (R)",
Mean_C = "Mean Cover Factor (C)",
Delta_NDVI = "Change in NDVI (ΔNDVI)"
))) +
theme_minimal(base_size = 14) +
theme(
strip.text = element_text(face = "bold", size = 14),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 12),
panel.grid.minor = element_blank()
) +
labs(
y = NULL,
title = "Time Series of RUSLE Components in Smith Catchment"
)
# Prepare long-form data
long_data <- rusle_results %>%
dplyr::select(Year, Mean_A, Mean_C, Delta_NDVI, Mean_R) %>%
pivot_longer(cols = -c(Year, Mean_A), names_to = "Variable", values_to = "Value") %>%
mutate(Variable = recode(Variable, !!!pretty_names))
# Plot
ggplot(long_data, aes(x = Value, y = Mean_A)) +
geom_point(size = 3, aes(color = Variable), alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, aes(color = Variable), linewidth = 1.2) +
facet_wrap(~ Variable, scales = "free", nrow = 1) +
stat_poly_eq(
aes(label = paste(..rr.label..)),
formula = y ~ x,
parse = TRUE,
label.x.npc = "right", label.y.npc = "top",
size = 5,
color = "black",
inherit.aes = TRUE
) +
theme_classic(base_size = 14) +
theme(
strip.background = element_rect(fill = "#E0E0E0", color = NA),
strip.text = element_text(size = 14, face = "bold", color = "black"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.position = "none",
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text.x = element_text(),
axis.ticks.x = element_line()
) +
scale_color_brewer(palette = "Set2") +
labs(
title = "Drivers of Soil Loss (RUSLE A) in Smith Catchment",
x = NULL,
y = expression(paste("Mean Soil Loss (A) [Tons·acre"^{-1}~"·yr"^{-1}*"]"))
)
r <- rast("processed_C_factors/C_factor_2021.tif")
r_df <- as.data.frame(r, xy = TRUE, na.rm = FALSE)
names(r_df)[3] <- "value"  # rename to 'value' for plotting
value_limits <- c(0, 0.6)
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_viridis_c(option = "C", limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal() +
labs(fill = "C Factor", title = "Smith Catchment C Factor - 2021")
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_viridis_c(option = "C", limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal() +
labs(fill = "C Factor", title = "Smith Catchment C Factor - 2021")
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_gradient(low = "dark green", mid = "yellow", high = "orange", option = "C", limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal() +
labs(fill = "C Factor", title = "Smith Catchment C Factor - 2021")
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_gradient(low = "dark green", high = "orange",
limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal() +
labs(fill = "C Factor", title = "Smith Catchment C Factor - 2021")
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_gradient(low = "dark green", high = "white",
limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal() +
labs(fill = "C Factor", title = "Smith Catchment C Factor - 2021")
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_gradient(low = "dark green", high = "white",
limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal(base_size = 14, base_family = "sans") +  # Set base font size and family
theme(
text = element_text(size = 14),                      # All text elements
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)
) +
labs(fill = "C Factor", title = "Smith Catchment C Factor - 2021")
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_gradient(low = "dark green", high = "orange",
limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal(base_size = 14) +
theme(
text = element_text(size = 14),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)
) +
labs(
x = "UTM10N X Coordinate",
y = "UTM10N Y Coordinate",
fill = "C Factor",
title = "Smith Catchment C Factor - 2021"
)
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_gradient(low = "dark green", high = "white",
limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal(base_size = 14) +
theme(
text = element_text(size = 14),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)
) +
labs(
x = "UTM10N X Coordinate",
y = "UTM10N Y Coordinate",
fill = "C Factor",
title = "Smith Catchment C Factor - 2021"
)
r <- rast("C:/Users/alect/OneDrive/Documents/GitHub/Clearcut-Erosion-Analytical-Workflows/Clearcut_RUSLE_Model/processed_C_factors/C_factor_2021.tif")
r_df <- as.data.frame(r, xy = TRUE, na.rm = FALSE)
names(r_df)[3] <- "value"  # rename to 'value' for plotting
ggplot(r_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_gradient(low = "dark green", high = "white",
limits = value_limits, na.value = "transparent") +
coord_equal() +
theme_minimal(base_size = 14) +
theme(
text = element_text(size = 14),
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11)
) +
labs(
x = "UTM10N X Coordinate",
y = "UTM10N Y Coordinate",
fill = "C Factor",
title = "Smith Catchment C Factor - 2021"
)
